import java.util.*;

/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // 按联通节点分组
        int[] colors = new int[graph.length];
        Arrays.fill(colors, -1);
        int color = 0;
        for (int i=0; i<graph.length; i++) {
            if (colors[i] == -1) {
                dfsSetColor(graph, i, colors, color++);
            }
        }

        int[] colorSize = new int[color];
        for (int c : colors) {
            colorSize[c]++;
        }

        int[] colorCount = new int[color];
        for (int node: initial) {
            colorCount[colors[node]]++;
        }


        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c = colors[node];
            if (colorCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (colorSize[c] > colorSize[colors[ans]])
                    ans = node;
                else if (colorSize[c] == colorSize[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int node: initial) {
                ans = Math.min(ans, node);
            }
        }

        return ans;

        //[[1,0,1,0],[0,1,0,0],[1,0,1,0],[0,0,0,1]]\n[1]
        //[[1,1,0],[1,1,0],[0,0,1]]\n[0,1,2]
    }

    private void dfsSetColor(int[][] graph, int node, int[] colors, int color) {
        colors[node] = color;
        for (int j=0; j<graph[node].length; j++) {
            if (j != node && graph[node][j] == 1 && colors[j] == -1) {
                colors[j] = color;
                dfsSetColor(graph, j, colors, color);
            }
        }
    }
}
// @lc code=end

